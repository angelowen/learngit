type NUL > EmptyFile.txt 建立新檔案
start file.txt 編輯檔案
dir 目錄
type file.txt 就是cat
git config --get-regexp alias 查看alias列表
git init 命令把這個目錄變成Git可以管理的倉庫
git add file2.txt file3.txt 把文件修改添加到暫存區
git commit -m "add 3 files." 把暫存區的所有內容提交到當前分支
git commit -a -m "message"   add +commit 同時
git status 目前狀態
git reflog 查看命令歷史，以便確定要回到未來的哪個版本。
git reset --hard HEAD~1 回覆上一個commit 版本
git reset --hard commit_id  允許我們在版本的歷史之間穿梭
git checkout -- file.txt 可以丟棄工作區的修改
git reset HEAD file.txt 可以把暫存區的修改撤銷掉
要從版本庫中刪除該文件，那就用命令 git rm 刪掉，並且 git commit
ssh 的位置在 CH/.ssh
git push origin master 推送最新修改
//看到http://xiaosheng.me/ebook/git-tutorial/5-1.html
------------------------------------------------------------------
查看分支： git branch
創建分支： git branch <name>
切換分支： git checkout <name>
創建+ 切換分支： git checkout -b <name>
合併某分支到當前分支： git merge <name>
刪除分支： git branch -d <name>
git log --graph --pretty=oneline --abbrev-commit 查看分支合併圖
-----------------------------------------------------------------
git stash  可以把當前工作現場“儲藏”起來，等以後恢復現場後繼續工作
git stash list 列表
git stash pop 回到工作現場
也可用 git stash apply 恢復，但是恢復後，stash 內容並不刪除，你需要用 git stash drop 來刪除
git stash apply stash@{0} 恢復特定的stash
---------------------------------------------------------------------
多人工作:
從本地推送分支，使用 git push origin branch-name ，如果推送失敗，先用 git pull 抓取遠程的新提交；
在本地創建和遠程分支對應的分支，使用 git checkout -b branch-name origin/branch-name ，本地和遠程分支的名稱最好一致
建立本地分支和遠程分支的關聯，使用 git branch --set-upstream branch-name origin/branch-name

